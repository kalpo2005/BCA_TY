Assignment 10 oracle 

create a table 
	CREATE TABLE sales(
	orderId NUMBER(3),
	orderDate DATE,
	orderPrice NUMBER(5),
	orderQuentity NUMBER(2),
	customerName VARCHAR(20)
	);
	
INSERT RECORDS
	
	INSERT INTO sales(orderId,orderDate,orderPrice,orderQuentity,customerName) VALUES (1,'22-DEC-2005',160,2,'Smith');
	
	INSERT INTO sales(orderId,orderDate,orderPrice,orderQuentity,customerName) VALUES (2,'10-AUG-2005',190,2,'Johnson');
		
	INSERT INTO sales(orderId,orderDate,orderPrice,orderQuentity,customerName) VALUES (3,'13-JUL-2005',500,5,'Baldwin');
	
	INSERT INTO sales(orderId,orderDate,orderPrice,orderQuentity,customerName) VALUES (4,'15-JUL-2005',420,2,'Smith');
	
	INSERT INTO sales(orderId,orderDate,orderPrice,orderQuentity,customerName) VALUES (5,'22-DEC-2005',1000,4,'Wood');
	
	INSERT INTO sales(orderId,orderDate,orderPrice,orderQuentity,customerName) VALUES (6,'02-OCT-2005',820,4,'Smith');
	
	INSERT INTO sales(orderId,orderDate,orderPrice,orderQuentity,customerName) VALUES (7,'11-NOV-2005',2000,2,'Baldwin');
	
	
	
1. NO OF SMITH HOW MANY ORDER 
	SELECT customerName AS CUSTOMER_NAME, COUNT(orderQuentity) FROM sales GROUP BY customerName HAVING customerName = 'Smith';

2.FIND A UNIQUE CUSTOMER TO ORDER A ORDER FROME STORE 
	SELECT COUNT(DISTINCT(customerName)) AS UNIQUE_NO FROM sales;

3. FIND A TOTAL ITEM TO CUSTOMER ITEM ORDER
	SELECT SUM(orderQuentity) AS total FROM sales;
	
4. average of the total items 
	SELECT SUM(orderQuentity)/COUNT(orderId) AS average FROM sales;
	
	SELECT customerName AS CUSTOMER_NAME, AVG(orderQuentity) FROM sales GROUP BY customerName;

5. find the avarage of the items but product price is a grater 2000
	SELECT AVG(orderQuentity) AS average FROM sales WHERE orderPrice > 200;
	
	
6. find the customer to paid a  minimum price
	SELECT customerName , MIN(orderPrice) FROM sales GROUP BY customerName;
	
	SELECT MIN(orderPrice) AS minimum FROM sales;
		
7.  find the customer to paid a  maximum price
	SELECT customerName , MAX(orderPrice) FROM sales GROUP BY customerName;
	
	SELECT MAX(orderPrice) AS minimum FROM sales;

8. unique customer name from the table
	SELECT DISTINCT(customerName) AS CUTOMER_NAME FROM sales;
	
9. CUSTOMER NAME ORDER IN DECEMBER MONTH
		
		SELECT customerName AS CUTOMER_NAME FROM sales where (TO_CHAR(orderDate,'month')) LIKE 'december%';

		SELECT DISTINCT(TO_CHAR(orderDate,'month')) FROM sales;
		
10 EACH CUTOMER TOTAL MONEY SPEND
	SELECT customerName, SUM(orderPrice*orderQuentity) FROM sales GROUP BY customerName;
	
11. customer spend a 1200 more than

	SELECT customerName,SUM(orderPrice*orderQuentity) AS TOTAL_MONEY FROM sales GROUP BY customerName HAVING SUM(orderPrice*orderQuentity)>1200;
		
12.  TOTAL ORDER IN GRATTER THAN 5 ORDER 
	SELECT customerName,SUM(orderQuentity) AS TOTAL_MONEY FROM sales GROUP BY customerName HAVING SUM(orderQuentity)>5;


13. SPEND A MORE THAN 1000 AFTER THAN DATA 10-01-2005

	SELECT orderDate,SUM(orderPrice) AS TOTAL_MONEY FROM sales GROUP BY orderDate AND orderDate > '10-jan-2005' HAVING SUM(orderPrice)>1000 ;
	
14. incresing orderwise	

	SELECT customerName,SUM(orderQuentity) AS TOTAL_MONEY FROM sales GROUP BY customerName ORDER BY SUM(orderQuentity);
	
15. descrising pricewise
	
	SELECT customerName,SUM(orderQuentity) AS TOTAL_MONEY FROM sales GROUP BY customerName ORDER BY SUM(orderQuentity) DESC;

	
	